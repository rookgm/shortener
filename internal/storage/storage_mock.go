// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rookgm/shortener/internal/models"
)

// MockURLStorage is a mock of URLStorage interface.
type MockURLStorage struct {
	ctrl     *gomock.Controller
	recorder *MockURLStorageMockRecorder
}

// MockURLStorageMockRecorder is the mock recorder for MockURLStorage.
type MockURLStorageMockRecorder struct {
	mock *MockURLStorage
}

// NewMockURLStorage creates a new mock instance.
func NewMockURLStorage(ctrl *gomock.Controller) *MockURLStorage {
	mock := &MockURLStorage{ctrl: ctrl}
	mock.recorder = &MockURLStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLStorage) EXPECT() *MockURLStorageMockRecorder {
	return m.recorder
}

// DeleteUserURLsCtx mocks base method.
func (m *MockURLStorage) DeleteUserURLsCtx(ctx context.Context, userID string, aliases []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserURLsCtx", ctx, userID, aliases)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserURLsCtx indicates an expected call of DeleteUserURLsCtx.
func (mr *MockURLStorageMockRecorder) DeleteUserURLsCtx(ctx, userID, aliases interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserURLsCtx", reflect.TypeOf((*MockURLStorage)(nil).DeleteUserURLsCtx), ctx, userID, aliases)
}

// GetAliasCtx mocks base method.
func (m *MockURLStorage) GetAliasCtx(ctx context.Context, url string) (models.ShrURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAliasCtx", ctx, url)
	ret0, _ := ret[0].(models.ShrURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAliasCtx indicates an expected call of GetAliasCtx.
func (mr *MockURLStorageMockRecorder) GetAliasCtx(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliasCtx", reflect.TypeOf((*MockURLStorage)(nil).GetAliasCtx), ctx, url)
}

// GetURLCtx mocks base method.
func (m *MockURLStorage) GetURLCtx(ctx context.Context, alias string) (models.ShrURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLCtx", ctx, alias)
	ret0, _ := ret[0].(models.ShrURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLCtx indicates an expected call of GetURLCtx.
func (mr *MockURLStorageMockRecorder) GetURLCtx(ctx, alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLCtx", reflect.TypeOf((*MockURLStorage)(nil).GetURLCtx), ctx, alias)
}

// GetUserURLsCtx mocks base method.
func (m *MockURLStorage) GetUserURLsCtx(ctx context.Context, userID string) ([]models.ShrURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLsCtx", ctx, userID)
	ret0, _ := ret[0].([]models.ShrURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLsCtx indicates an expected call of GetUserURLsCtx.
func (mr *MockURLStorageMockRecorder) GetUserURLsCtx(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLsCtx", reflect.TypeOf((*MockURLStorage)(nil).GetUserURLsCtx), ctx, userID)
}

// LoadFromFile mocks base method.
func (m *MockURLStorage) LoadFromFile() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadFromFile")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadFromFile indicates an expected call of LoadFromFile.
func (mr *MockURLStorageMockRecorder) LoadFromFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFromFile", reflect.TypeOf((*MockURLStorage)(nil).LoadFromFile))
}

// StoreBatchURLCtx mocks base method.
func (m *MockURLStorage) StoreBatchURLCtx(ctx context.Context, urls []models.ShrURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBatchURLCtx", ctx, urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreBatchURLCtx indicates an expected call of StoreBatchURLCtx.
func (mr *MockURLStorageMockRecorder) StoreBatchURLCtx(ctx, urls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBatchURLCtx", reflect.TypeOf((*MockURLStorage)(nil).StoreBatchURLCtx), ctx, urls)
}

// StoreURLCtx mocks base method.
func (m *MockURLStorage) StoreURLCtx(ctx context.Context, url models.ShrURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreURLCtx", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreURLCtx indicates an expected call of StoreURLCtx.
func (mr *MockURLStorageMockRecorder) StoreURLCtx(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreURLCtx", reflect.TypeOf((*MockURLStorage)(nil).StoreURLCtx), ctx, url)
}
